import java_cup.runtime.*;

terminal CLASS;
terminal SEMICOLON, COMMA, LBRACE, RBRACE, EQ, LPAREN, RPAREN;
terminal BOOLEAN;
terminal INT;
terminal VOID;
terminal IF, ELSE;
terminal RETURN;
terminal PLUS, MULT;
terminal AND, OR, NOT;
terminal EQEQ, NOTEQ;

terminal java.lang.Integer INTEGER_LITERAL;
terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.String IDENTIFIER;

non terminal goal;

non terminal literal;
non terminal primitive_type;
non terminal class_type;
non terminal class_declaration;
non terminal class_body;
non terminal class_body_declarations;
non terminal class_member_declaration;
non terminal field_declaration;
non terminal method_declaration;
non terminal  method_parameter_list, method_parameter_list_opt;
non terminal method_statements, method_statement;
non terminal if_statement, else_opt;
non terminal return_statement;
non terminal assignment_statement;
non terminal method_invocation_statement;
non terminal expression, expression_opt;
non terminal argument_list, argument_list_opt;
non terminal method_invocation;
non terminal arithmetic_expression;
non terminal equality_expression;
non terminal boolean_expression;

precedence left OR;
precedence left AND;
precedence left EQEQ, NOTEQ;
precedence left PLUS;
precedence left MULT;
precedence left NOT;
precedence left IF, ELSE;

start with goal;

goal ::= class_declaration;

literal ::=	INTEGER_LITERAL | BOOLEAN_LITERAL;

// tipagem
primitive_type ::= INT | BOOLEAN;

// declaração de classe
class_declaration ::= CLASS IDENTIFIER class_body;

class_body ::= LBRACE class_body_declarations RBRACE;

class_body_declarations ::= class_member_declaration | class_body_declarations class_member_declaration;

class_member_declaration ::= field_declaration | method_declaration;

field_declaration ::= primitive_type IDENTIFIER SEMICOLON;

// declaração de método
method_declaration ::= primitive_type IDENTIFIER LPAREN method_parameter_list_opt RPAREN LBRACE method_statements RBRACE | VOID IDENTIFIER LPAREN method_parameter_list_opt RPAREN LBRACE method_statements RBRACE;

method_parameter_list ::= primitive_type IDENTIFIER | method_parameter_list COMMA primitive_type IDENTIFIER;

method_parameter_list_opt ::= | method_parameter_list;

method_statements ::= method_statement | method_statements method_statement;

method_statement ::= assignment_statement | method_invocation_statement | return_statement | if_statement;

// chamada de método
method_invocation ::= IDENTIFIER LPAREN argument_list_opt RPAREN;

argument_list ::= expression | argument_list COMMA expression;

argument_list_opt ::= | argument_list;

// comandos
method_invocation_statement ::= method_invocation SEMICOLON;

if_statement ::= IF LPAREN expression RPAREN method_statements else_opt;

else_opt ::= | ELSE method_statements;

return_statement ::= RETURN expression_opt SEMICOLON;

expression_opt ::= expression | ;

assignment_statement ::= IDENTIFIER EQ expression SEMICOLON;

// expressões
arithmetic_expression ::= expression PLUS expression | expression MULT expression;

equality_expression ::= expression EQEQ expression | expression NOTEQ expression;

boolean_expression ::= expression AND expression | expression OR expression | NOT expression;

expression ::= IDENTIFIER | literal | arithmetic_expression | boolean_expression | equality_expression | method_invocation;
