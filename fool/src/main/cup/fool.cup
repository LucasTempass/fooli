import java_cup.runtime.*;
import java.util.*;
import tac.*;

parser code {:

    TACGenerator program = new TACGenerator();

:}

terminal CLASS;
terminal SEMICOLON, COMMA, LBRACE, RBRACE, EQ, LPAREN, RPAREN;
terminal BOOLEAN;
terminal INT;
terminal VOID;
terminal IF, ELSE;
terminal WHILE;
terminal RETURN;
terminal PLUS, MULT;
terminal AND, OR, NOT;
terminal EQEQ, NOTEQ;

terminal java.lang.Integer INTEGER_LITERAL;
terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.String IDENTIFIER;

non terminal TACGenerator goal;

non terminal Operand literal;
non terminal primitive_type;
non terminal class_declaration;
non terminal class_body;
non terminal class_body_declarations;
non terminal class_member_declaration;
non terminal field_declaration;
non terminal method_declaration;
non terminal method_parameter_list, method_parameter_list_opt;
non terminal method_statements, method_statement;
non terminal if_statement, if_else_statement;
non terminal return_statement;
non terminal assignment_statement;
non terminal method_invocation_statement;
non terminal Operand expression;
non terminal expression_opt;
non terminal argument_list, argument_list_opt;
non terminal Operand method_invocation;
non terminal Operand equality_expression;
non terminal Operand boolean_expression;
non terminal Operand boolean_and_expression;
non terminal Operand unary_expression;
non terminal Operand multiplicative_expression;
non terminal Operand additive_expression;
non terminal method_header;
non terminal else_statement_opt;
non terminal while_statement;

start with goal;

goal ::= class_declaration {: RESULT = program; :};

literal ::= INTEGER_LITERAL:i {: RESULT = program.generateLiteral(i); :}
| BOOLEAN_LITERAL:b {: RESULT = program.generateLiteral(b); :};

// tipagem
primitive_type ::= INT | BOOLEAN;

// declaração de classe
class_declaration ::= CLASS IDENTIFIER:id class_body {: program.enter(id); :};

class_body ::= LBRACE class_body_declarations RBRACE;

class_body_declarations ::= class_member_declaration | class_body_declarations class_member_declaration;

class_member_declaration ::= field_declaration | method_declaration;

field_declaration ::= primitive_type IDENTIFIER:id SEMICOLON {: program.enter(id); :};

// declaração de método
method_declaration ::= method_header LBRACE method_statements RBRACE;

method_header ::= primitive_type IDENTIFIER:id LPAREN method_parameter_list_opt RPAREN {: program.enter(id); :}
| VOID IDENTIFIER:id LPAREN method_parameter_list_opt RPAREN {: program.enter(id); :};

method_parameter_list ::= primitive_type IDENTIFIER
| method_parameter_list COMMA primitive_type IDENTIFIER;

method_parameter_list_opt ::= | method_parameter_list;

method_statements ::= method_statement | method_statements method_statement;

method_statement ::= if_statement
| while_statement
| method_invocation_statement
| return_statement
| assignment_statement;

if_statement ::= IF LPAREN expression RPAREN LBRACE method_statement RBRACE else_statement_opt;

else_statement_opt ::= ELSE LBRACE method_statement RBRACE | ;

while_statement ::= WHILE LPAREN expression RPAREN method_statement;

// chamada de método
method_invocation ::= IDENTIFIER:id LPAREN argument_list_opt RPAREN;

argument_list ::= expression | argument_list COMMA expression;

argument_list_opt ::= | argument_list;

// comandos
method_invocation_statement ::= method_invocation SEMICOLON;

return_statement ::= RETURN expression_opt SEMICOLON;

assignment_statement ::= IDENTIFIER:id EQ expression:e SEMICOLON {: program.generateAssignment(id, e); :};

// expressões
unary_expression ::= literal:l {: RESULT = l; :}
| method_invocation {: RESULT = new Operand(""); :}
| IDENTIFIER:id {: RESULT = program.lookup(id); :}
| NOT unary_expression:e {: RESULT = program.generateUnaryOp("!", e); :};

multiplicative_expression ::= unary_expression:e {: RESULT = e; :}
| multiplicative_expression:first MULT unary_expression:second {: RESULT = program.generateBinaryOp("*", first, second); :};

additive_expression ::= multiplicative_expression:e {: RESULT = e; :}
| additive_expression:first PLUS multiplicative_expression:second {: RESULT = program.generateBinaryOp("+", first, second); :};

equality_expression ::= additive_expression:e {: RESULT = e; :}
| equality_expression:first EQEQ additive_expression:second {: RESULT = program.generateBinaryOp("==", first, second); :}
| equality_expression:first NOTEQ additive_expression:second {: RESULT = program.generateBinaryOp("!=", first, second); :};

boolean_and_expression ::= equality_expression:e {: RESULT = e; :}
| boolean_and_expression:first AND equality_expression:second {: RESULT = program.generateBinaryOp("&&", first, second); :};

boolean_expression ::= boolean_and_expression:e {: RESULT = e; :}
| boolean_expression:first OR boolean_and_expression:second {: RESULT = program.generateBinaryOp("||", first, second); :};

expression ::= boolean_expression:e {: RESULT = e; :};

expression_opt ::= expression | ;