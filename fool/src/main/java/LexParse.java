
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LexParse extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public LexParse() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LexParse(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LexParse(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\006\005\000\002\007\005\000\002\010\003\000" +
    "\002\010\004\000\002\011\003\000\002\011\003\000\002" +
    "\012\005\000\002\013\012\000\002\013\012\000\002\014" +
    "\004\000\002\014\006\000\002\015\002\000\002\015\003" +
    "\000\002\016\003\000\002\016\004\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\031\006\000\002\027\003\000\002\027\005\000\002\030" +
    "\002\000\002\030\003\000\002\024\004\000\002\020\011" +
    "\000\002\022\005\000\002\026\003\000\002\026\002\000" +
    "\002\023\006\000\002\032\005\000\002\032\005\000\002" +
    "\033\005\000\002\033\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\004\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\004\004\005\001\002\000\004\002\135\001" +
    "\002\000\004\033\007\001\002\000\004\002\000\001\002" +
    "\000\004\007\010\001\002\000\010\014\015\015\017\016" +
    "\016\001\002\000\004\002\ufffb\001\002\000\012\010\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\001\002\000\012\010\133\014" +
    "\015\015\017\016\016\001\002\000\004\033\123\001\002" +
    "\000\004\033\ufffc\001\002\000\004\033\022\001\002\000" +
    "\004\033\ufffd\001\002\000\012\010\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\001\002\000\012\010\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\001\002\000\004\012\023\001\002\000\010\013\ufff0" +
    "\014\015\015\017\001\002\000\006\006\120\013\uffef\001" +
    "\002\000\004\013\030\001\002\000\004\033\027\001\002" +
    "\000\006\006\ufff2\013\ufff2\001\002\000\004\007\031\001" +
    "\002\000\010\017\033\021\037\033\035\001\002\000\004" +
    "\005\117\001\002\000\004\012\111\001\002\000\014\010" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\033\uffeb\001\002\000\006" +
    "\011\106\012\076\001\002\000\014\010\uffee\017\uffee\020" +
    "\uffee\021\uffee\033\uffee\001\002\000\014\005\uffdf\026\055" +
    "\031\060\032\050\033\054\001\002\000\012\010\045\017" +
    "\033\021\037\033\035\001\002\000\014\010\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\033\uffe9\001\002\000\014\010\uffea\017" +
    "\uffea\020\uffea\021\uffea\033\uffea\001\002\000\014\010\uffec" +
    "\017\uffec\020\uffec\021\uffec\033\uffec\001\002\000\014\010" +
    "\uffed\017\uffed\020\uffed\021\uffed\033\uffed\001\002\000\012" +
    "\010\ufff3\014\ufff3\015\ufff3\016\ufff3\001\002\000\024\005" +
    "\uffd1\006\uffd1\013\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\027\uffd1\030\uffd1\001\002\000\024\005\uffd2\006\uffd2\013" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\030\uffd2" +
    "\001\002\000\024\005\ufffe\006\ufffe\013\ufffe\022\ufffe\023" +
    "\ufffe\024\ufffe\025\ufffe\027\ufffe\030\ufffe\001\002\000\024" +
    "\005\uffd4\006\uffd4\013\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\027\uffd4\030\uffd4\001\002\000\020\005\uffe0\022\064" +
    "\023\062\024\063\025\066\027\067\030\065\001\002\000" +
    "\004\005\105\001\002\000\026\005\uffd6\006\uffd6\012\076" +
    "\013\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\027\uffd6\030" +
    "\uffd6\001\002\000\012\026\055\031\060\032\050\033\054" +
    "\001\002\000\024\005\uffd5\006\uffd5\013\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5\001\002\000\024" +
    "\005\uffd3\006\uffd3\013\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\027\uffd3\030\uffd3\001\002\000\024\005\uffff\006\uffff" +
    "\013\uffff\022\uffff\023\uffff\024\uffff\025\uffff\027\uffff\030" +
    "\uffff\001\002\000\024\005\uffd7\006\uffd7\013\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7\001\002\000" +
    "\012\026\055\031\060\032\050\033\054\001\002\000\012" +
    "\026\055\031\060\032\050\033\054\001\002\000\012\026" +
    "\055\031\060\032\050\033\054\001\002\000\012\026\055" +
    "\031\060\032\050\033\054\001\002\000\012\026\055\031" +
    "\060\032\050\033\054\001\002\000\012\026\055\031\060" +
    "\032\050\033\054\001\002\000\024\005\uffdb\006\uffdb\013" +
    "\uffdb\022\064\023\062\024\uffdb\025\uffdb\027\uffdb\030\uffdb" +
    "\001\002\000\024\005\uffd8\006\uffd8\013\uffd8\022\064\023" +
    "\062\024\063\025\uffd8\027\067\030\065\001\002\000\024" +
    "\005\uffda\006\uffda\013\uffda\022\064\023\062\024\uffda\025" +
    "\uffda\027\uffda\030\uffda\001\002\000\024\005\uffdd\006\uffdd" +
    "\013\uffdd\022\uffdd\023\062\024\uffdd\025\uffdd\027\uffdd\030" +
    "\uffdd\001\002\000\024\005\uffd9\006\uffd9\013\uffd9\022\064" +
    "\023\062\024\uffd9\025\uffd9\027\067\030\065\001\002\000" +
    "\024\005\uffdc\006\uffdc\013\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\027\uffdc\030\uffdc\001\002\000\014\013\uffe5\026" +
    "\055\031\060\032\050\033\054\001\002\000\004\013\104" +
    "\001\002\000\006\006\102\013\uffe4\001\002\000\022\006" +
    "\uffe7\013\uffe7\022\064\023\062\024\063\025\066\027\067" +
    "\030\065\001\002\000\012\026\055\031\060\032\050\033" +
    "\054\001\002\000\022\006\uffe6\013\uffe6\022\064\023\062" +
    "\024\063\025\066\027\067\030\065\001\002\000\024\005" +
    "\uffe8\006\uffe8\013\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\027\uffe8\030\uffe8\001\002\000\014\010\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\033\uffe1\001\002\000\012\026\055\031\060" +
    "\032\050\033\054\001\002\000\020\005\110\022\064\023" +
    "\062\024\063\025\066\027\067\030\065\001\002\000\014" +
    "\010\uffde\017\uffde\020\uffde\021\uffde\033\uffde\001\002\000" +
    "\012\026\055\031\060\032\050\033\054\001\002\000\020" +
    "\013\113\022\064\023\062\024\063\025\066\027\067\030" +
    "\065\001\002\000\010\017\033\021\037\033\035\001\002" +
    "\000\012\017\033\020\115\021\037\033\035\001\002\000" +
    "\010\017\033\021\037\033\035\001\002\000\014\010\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\033\uffe2\001\002\000\014\010" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\033\uffe3\001\002\000\006" +
    "\014\015\015\017\001\002\000\004\033\122\001\002\000" +
    "\006\006\ufff1\013\ufff1\001\002\000\006\005\124\012\125" +
    "\001\002\000\012\010\ufff5\014\ufff5\015\ufff5\016\ufff5\001" +
    "\002\000\010\013\ufff0\014\015\015\017\001\002\000\004" +
    "\013\127\001\002\000\004\007\130\001\002\000\010\017" +
    "\033\021\037\033\035\001\002\000\012\010\132\017\033" +
    "\021\037\033\035\001\002\000\012\010\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\001\002\000\004\002\ufffa\001\002\000\012" +
    "\010\ufff8\014\ufff8\015\ufff8\016\ufff8\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\006\002\003\006\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\010" +
    "\001\001\000\014\004\013\010\012\011\017\012\011\013" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\013\011\133\012\011\013\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\025\014\023\015\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\016\037\017\035\020\040\022\041" +
    "\023\042\024\033\031\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\055\025\051\026\052\031\045\032" +
    "\050\033\046\034\056\001\001\000\016\017\043\020\040" +
    "\022\041\023\042\024\033\031\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\055\025\060\031" +
    "\045\032\050\033\046\034\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\055\025\074\031\045\032\050\033\046\034\056" +
    "\001\001\000\016\003\055\025\073\031\045\032\050\033" +
    "\046\034\056\001\001\000\016\003\055\025\072\031\045" +
    "\032\050\033\046\034\056\001\001\000\016\003\055\025" +
    "\071\031\045\032\050\033\046\034\056\001\001\000\016" +
    "\003\055\025\070\031\045\032\050\033\046\034\056\001" +
    "\001\000\016\003\055\025\067\031\045\032\050\033\046" +
    "\034\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\055\025\100\027\077\030\076\031" +
    "\045\032\050\033\046\034\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\055\025" +
    "\102\031\045\032\050\033\046\034\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\055\025\106\031\045\032\050\033\046\034\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\055\025" +
    "\111\031\045\032\050\033\046\034\056\001\001\000\002" +
    "\001\001\000\020\016\113\017\035\020\040\022\041\023" +
    "\042\024\033\031\031\001\001\000\016\017\043\020\040" +
    "\022\041\023\042\024\033\031\031\001\001\000\020\016" +
    "\115\017\035\020\040\022\041\023\042\024\033\031\031" +
    "\001\001\000\016\017\043\020\040\022\041\023\042\024" +
    "\033\031\031\001\001\000\002\001\001\000\004\004\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\025\014\023\015\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\130\017\035\020\040\022\041\023\042\024\033\031\031" +
    "\001\001\000\016\017\043\020\040\022\041\023\042\024" +
    "\033\031\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LexParse$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LexParse$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LexParse$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LexParse$actions {
  private final LexParse parser;

  /** Constructor */
  CUP$LexParse$actions(LexParse parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LexParse$do_action_part00000000(
    int                        CUP$LexParse$act_num,
    java_cup.runtime.lr_parser CUP$LexParse$parser,
    java.util.Stack            CUP$LexParse$stack,
    int                        CUP$LexParse$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LexParse$result;

      /* select the action based on the action number */
      switch (CUP$LexParse$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$LexParse$stack.elementAt(CUP$LexParse$top-1)).value;
		RESULT = start_val;
              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-1)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LexParse$parser.done_parsing();
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= class_declaration 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literal ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // primitive_type ::= INT 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("primitive_type",2, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // primitive_type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("primitive_type",2, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_declaration ::= CLASS IDENTIFIER class_body 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("class_declaration",4, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-2)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_body ::= LBRACE class_body_declarations RBRACE 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("class_body",5, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-2)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // class_body_declarations ::= class_member_declaration 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("class_body_declarations",6, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // class_body_declarations ::= class_body_declarations class_member_declaration 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("class_body_declarations",6, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-1)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // class_member_declaration ::= field_declaration 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("class_member_declaration",7, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // class_member_declaration ::= method_declaration 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("class_member_declaration",7, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // field_declaration ::= primitive_type IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("field_declaration",8, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-2)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_declaration ::= primitive_type IDENTIFIER LPAREN method_parameter_list_opt RPAREN LBRACE method_statements RBRACE 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("method_declaration",9, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-7)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_declaration ::= VOID IDENTIFIER LPAREN method_parameter_list_opt RPAREN LBRACE method_statements RBRACE 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("method_declaration",9, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-7)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_parameter_list ::= primitive_type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("method_parameter_list",10, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-1)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method_parameter_list ::= method_parameter_list COMMA primitive_type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("method_parameter_list",10, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-3)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method_parameter_list_opt ::= 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("method_parameter_list_opt",11, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method_parameter_list_opt ::= method_parameter_list 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("method_parameter_list_opt",11, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_statements ::= method_statement 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("method_statements",12, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method_statements ::= method_statements method_statement 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("method_statements",12, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-1)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // method_statement ::= assignment_statement 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("method_statement",13, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // method_statement ::= method_invocation_statement 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("method_statement",13, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // method_statement ::= return_statement 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("method_statement",13, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // method_statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("method_statement",13, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // method_invocation ::= IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("method_invocation",23, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-3)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // argument_list ::= expression 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("argument_list",21, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // argument_list ::= argument_list COMMA expression 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("argument_list",21, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-2)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argument_list_opt ::= 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("argument_list_opt",22, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // argument_list_opt ::= argument_list 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("argument_list_opt",22, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // method_invocation_statement ::= method_invocation SEMICOLON 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("method_invocation_statement",18, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-1)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if_statement ::= IF LPAREN expression RPAREN method_statements ELSE method_statements 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("if_statement",14, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-6)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // return_statement ::= RETURN expression_opt SEMICOLON 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("return_statement",16, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-2)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression_opt ::= expression 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("expression_opt",20, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression_opt ::= 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("expression_opt",20, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assignment_statement ::= IDENTIFIER EQ expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("assignment_statement",17, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-3)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arithmetic_expression ::= expression PLUS expression 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",24, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-2)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arithmetic_expression ::= expression MULT expression 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",24, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-2)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // equality_expression ::= expression EQEQ expression 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("equality_expression",25, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-2)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // equality_expression ::= expression NOTEQ expression 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("equality_expression",25, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-2)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // boolean_expression ::= expression AND expression 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("boolean_expression",26, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-2)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // boolean_expression ::= expression OR expression 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("boolean_expression",26, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-2)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // boolean_expression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("boolean_expression",26, ((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top-1)), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= literal 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= arithmetic_expression 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= boolean_expression 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= equality_expression 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= method_invocation 
            {
              Object RESULT =null;

              CUP$LexParse$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()), RESULT);
            }
          return CUP$LexParse$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LexParse$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LexParse$do_action(
    int                        CUP$LexParse$act_num,
    java_cup.runtime.lr_parser CUP$LexParse$parser,
    java.util.Stack            CUP$LexParse$stack,
    int                        CUP$LexParse$top)
    throws java.lang.Exception
    {
              return CUP$LexParse$do_action_part00000000(
                               CUP$LexParse$act_num,
                               CUP$LexParse$parser,
                               CUP$LexParse$stack,
                               CUP$LexParse$top);
    }
}

}
